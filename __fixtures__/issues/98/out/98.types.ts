/**
* This file was automatically generated by @abstract-money/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export interface InstantiateMsg {
  install_fee: Coin;
  registry_fee: Coin;
  [k: string]: unknown;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export type ExecuteMsg = InstallableExecMsg | ExecMsg;
export type InstallableExecMsg = {
  proxy_install_plugin: {
    id: number;
    instantiate_msg: Binary;
    [k: string]: unknown;
  };
};
export type Binary = string;
export type ExecMsg = {
  register_plugin: {
    checksum: string;
    code_id: number;
    creator: string;
    ipfs_hash: string;
    name: string;
    version: string;
    [k: string]: unknown;
  };
} | {
  unregister_plugin: {
    id: number;
    [k: string]: unknown;
  };
} | {
  update_plugin: {
    checksum?: string | null;
    code_id?: number | null;
    creator?: string | null;
    id: number;
    ipfs_hash?: string | null;
    name?: string | null;
    version?: string | null;
    [k: string]: unknown;
  };
} | {
  update_registry_fee: {
    new_fee: Coin;
    [k: string]: unknown;
  };
} | {
  update_dao_addr: {
    new_addr: string;
    [k: string]: unknown;
  };
};
export type QueryMsg = InstallableQueryMsg | QueryMsg1;
export type InstallableQueryMsg = string;
export type QueryMsg1 = {
  get_config: {
    [k: string]: unknown;
  };
} | {
  get_plugins: {
    limit?: number | null;
    start_after?: number | null;
    [k: string]: unknown;
  };
} | {
  get_plugin_by_id: {
    id: number;
    [k: string]: unknown;
  };
};
export interface ConfigResponse {
  dao_addr: string;
  registry_fee: Coin;
}
export type NullablePlugin = Plugin | null;
export type CanonicalAddr = Binary;
export interface Plugin {
  checksum: string;
  code_id: number;
  creator: CanonicalAddr;
  id: number;
  ipfs_hash: string;
  name: string;
  version: string;
}
export interface PluginsResponse {
  plugins: Plugin[];
  total: number;
}