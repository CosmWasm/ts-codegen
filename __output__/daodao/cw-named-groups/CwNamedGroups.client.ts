/**
* This file was automatically generated by @cosmwasm/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { DumpResponse, Group, ExecuteMsg, InstantiateMsg, Addr, ListAddressesResponse, ListGroupsResponse, QueryMsg } from "./CwNamedGroups.types";
export interface CwNamedGroupsReadOnlyInterface {
  contractAddress: string;
  dump: () => Promise<DumpResponse>;
  listGroups: ({
    address,
    limit,
    offset
  }: {
    address: string;
    limit?: number;
    offset?: number;
  }) => Promise<ListGroupsResponse>;
  listAddresses: ({
    group,
    limit,
    offset
  }: {
    group: string;
    limit?: number;
    offset?: number;
  }) => Promise<ListAddressesResponse>;
  isAddressInGroup: ({
    address,
    group
  }: {
    address: string;
    group: string;
  }) => Promise<IsAddressInGroupResponse>;
}
export class CwNamedGroupsQueryClient implements CwNamedGroupsReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.dump = this.dump.bind(this);
    this.listGroups = this.listGroups.bind(this);
    this.listAddresses = this.listAddresses.bind(this);
    this.isAddressInGroup = this.isAddressInGroup.bind(this);
  }
  dump = async (): Promise<DumpResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      dump: {}
    });
  };
  listGroups = async ({
    address,
    limit,
    offset
  }: {
    address: string;
    limit?: number;
    offset?: number;
  }): Promise<ListGroupsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_groups: {
        address,
        limit,
        offset
      }
    });
  };
  listAddresses = async ({
    group,
    limit,
    offset
  }: {
    group: string;
    limit?: number;
    offset?: number;
  }): Promise<ListAddressesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_addresses: {
        group,
        limit,
        offset
      }
    });
  };
  isAddressInGroup = async ({
    address,
    group
  }: {
    address: string;
    group: string;
  }): Promise<IsAddressInGroupResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_address_in_group: {
        address,
        group
      }
    });
  };
}
export interface CwNamedGroupsInterface extends CwNamedGroupsReadOnlyInterface {
  contractAddress: string;
  sender: string;
  update: ({
    addressesToAdd,
    addressesToRemove,
    group
  }: {
    addressesToAdd?: string[];
    addressesToRemove?: string[];
    group: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  removeGroup: ({
    group
  }: {
    group: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateOwner: ({
    owner
  }: {
    owner: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class CwNamedGroupsClient extends CwNamedGroupsQueryClient implements CwNamedGroupsInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.update = this.update.bind(this);
    this.removeGroup = this.removeGroup.bind(this);
    this.updateOwner = this.updateOwner.bind(this);
  }
  update = async ({
    addressesToAdd,
    addressesToRemove,
    group
  }: {
    addressesToAdd?: string[];
    addressesToRemove?: string[];
    group: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update: {
        addresses_to_add: addressesToAdd,
        addresses_to_remove: addressesToRemove,
        group
      }
    }, fee_, memo_, funds_);
  };
  removeGroup = async ({
    group
  }: {
    group: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_group: {
        group
      }
    }, fee_, memo_, funds_);
  };
  updateOwner = async ({
    owner
  }: {
    owner: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_owner: {
        owner
      }
    }, fee_, memo_, funds_);
  };
}