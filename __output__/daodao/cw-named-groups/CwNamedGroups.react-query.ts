/**
* This file was automatically generated by @abstract-money/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { DumpResponse, Group, ExecuteMsg, InstantiateMsg, Addr, ListAddressesResponse, ListGroupsResponse, QueryMsg } from "./CwNamedGroups.types";
import { CwNamedGroupsQueryClient } from "./CwNamedGroupsclient";
export interface CwNamedGroupsReactQuery<TResponse, TData = TResponse> {
  client: CwNamedGroupsQueryClient;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface CwNamedGroupsIsAddressInGroupQuery<TData> extends CwNamedGroupsReactQuery<IsAddressInGroupResponse, TData> {
  args: {
    address: string;
    group: string;
  };
}
export function useCwNamedGroupsIsAddressInGroupQuery<TData = IsAddressInGroupResponse>({
  client,
  args,
  options
}: CwNamedGroupsIsAddressInGroupQuery<TData>) {
  return useQuery<IsAddressInGroupResponse, Error, TData>(["cwNamedGroupsIsAddressInGroup", client.contractAddress, JSON.stringify(args)], () => client.isAddressInGroup({
    address: args.address,
    group: args.group
  }), options);
}
export interface CwNamedGroupsListAddressesQuery<TData> extends CwNamedGroupsReactQuery<ListAddressesResponse, TData> {
  args: {
    group: string;
    limit?: number;
    offset?: number;
  };
}
export function useCwNamedGroupsListAddressesQuery<TData = ListAddressesResponse>({
  client,
  args,
  options
}: CwNamedGroupsListAddressesQuery<TData>) {
  return useQuery<ListAddressesResponse, Error, TData>(["cwNamedGroupsListAddresses", client.contractAddress, JSON.stringify(args)], () => client.listAddresses({
    group: args.group,
    limit: args.limit,
    offset: args.offset
  }), options);
}
export interface CwNamedGroupsListGroupsQuery<TData> extends CwNamedGroupsReactQuery<ListGroupsResponse, TData> {
  args: {
    address: string;
    limit?: number;
    offset?: number;
  };
}
export function useCwNamedGroupsListGroupsQuery<TData = ListGroupsResponse>({
  client,
  args,
  options
}: CwNamedGroupsListGroupsQuery<TData>) {
  return useQuery<ListGroupsResponse, Error, TData>(["cwNamedGroupsListGroups", client.contractAddress, JSON.stringify(args)], () => client.listGroups({
    address: args.address,
    limit: args.limit,
    offset: args.offset
  }), options);
}
export interface CwNamedGroupsDumpQuery<TData> extends CwNamedGroupsReactQuery<DumpResponse, TData> {}
export function useCwNamedGroupsDumpQuery<TData = DumpResponse>({
  client,
  options
}: CwNamedGroupsDumpQuery<TData>) {
  return useQuery<DumpResponse, Error, TData>(["cwNamedGroupsDump", client.contractAddress], () => client.dump(), options);
}