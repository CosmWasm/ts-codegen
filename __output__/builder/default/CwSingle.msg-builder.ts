/**
* This file was automatically generated by @abstract-money/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { Addr, Uint128, Duration, Threshold, PercentageThreshold, Decimal, ConfigResponse, CheckedDepositInfo, ExecuteMsg, CosmosMsgForEmpty, BankMsg, StakingMsg, DistributionMsg, Binary, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, Vote, DepositToken, Coin, Empty, IbcTimeout, IbcTimeoutBlock, DepositInfo, GovernanceModulesResponse, InfoResponse, ContractVersion, InstantiateMsg, Expiration, Status, ListProposalsResponse, ProposalResponse, Proposal, Votes, ListVotesResponse, VoteInfo, MigrateMsg, ProposalCountResponse, ProposalHooksResponse, QueryMsg, ReverseProposalsResponse, VoteHooksResponse, VoteResponse } from "./CwSingle.types";
import { CamelCasedProperties } from "type-fest";
export abstract class CwSingleExecuteMsgBuilder {
  static propose = ({
    description,
    msgs,
    title
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    propose: unknown;
  }>["propose"]>): ExecuteMsg => {
    return {
      propose: ({
        description,
        msgs,
        title
      } as const)
    };
  };
  static vote = ({
    proposalId,
    vote
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    vote: unknown;
  }>["vote"]>): ExecuteMsg => {
    return {
      vote: ({
        proposal_id: proposalId,
        vote
      } as const)
    };
  };
  static execute = ({
    proposalId
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    execute: unknown;
  }>["execute"]>): ExecuteMsg => {
    return {
      execute: ({
        proposal_id: proposalId
      } as const)
    };
  };
  static close = ({
    proposalId
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    close: unknown;
  }>["close"]>): ExecuteMsg => {
    return {
      close: ({
        proposal_id: proposalId
      } as const)
    };
  };
  static updateConfig = ({
    allowRevoting,
    dao,
    depositInfo,
    maxVotingPeriod,
    minVotingPeriod,
    onlyMembersExecute,
    threshold
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    update_config: unknown;
  }>["update_config"]>): ExecuteMsg => {
    return {
      update_config: ({
        allow_revoting: allowRevoting,
        dao,
        deposit_info: depositInfo,
        max_voting_period: maxVotingPeriod,
        min_voting_period: minVotingPeriod,
        only_members_execute: onlyMembersExecute,
        threshold
      } as const)
    };
  };
  static addProposalHook = ({
    address
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    add_proposal_hook: unknown;
  }>["add_proposal_hook"]>): ExecuteMsg => {
    return {
      add_proposal_hook: ({
        address
      } as const)
    };
  };
  static removeProposalHook = ({
    address
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    remove_proposal_hook: unknown;
  }>["remove_proposal_hook"]>): ExecuteMsg => {
    return {
      remove_proposal_hook: ({
        address
      } as const)
    };
  };
  static addVoteHook = ({
    address
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    add_vote_hook: unknown;
  }>["add_vote_hook"]>): ExecuteMsg => {
    return {
      add_vote_hook: ({
        address
      } as const)
    };
  };
  static removeVoteHook = ({
    address
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    remove_vote_hook: unknown;
  }>["remove_vote_hook"]>): ExecuteMsg => {
    return {
      remove_vote_hook: ({
        address
      } as const)
    };
  };
}
export abstract class CwSingleQueryMsgBuilder {
  static config = (): QueryMsg => {
    return {
      config: ({} as const)
    };
  };
  static proposal = ({
    proposalId
  }: CamelCasedProperties<Extract<QueryMsg, {
    proposal: unknown;
  }>["proposal"]>): QueryMsg => {
    return {
      proposal: ({
        proposal_id: proposalId
      } as const)
    };
  };
  static listProposals = ({
    limit,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    list_proposals: unknown;
  }>["list_proposals"]>): QueryMsg => {
    return {
      list_proposals: ({
        limit,
        start_after: startAfter
      } as const)
    };
  };
  static reverseProposals = ({
    limit,
    startBefore
  }: CamelCasedProperties<Extract<QueryMsg, {
    reverse_proposals: unknown;
  }>["reverse_proposals"]>): QueryMsg => {
    return {
      reverse_proposals: ({
        limit,
        start_before: startBefore
      } as const)
    };
  };
  static proposalCount = (): QueryMsg => {
    return {
      proposal_count: ({} as const)
    };
  };
  static vote = ({
    proposalId,
    voter
  }: CamelCasedProperties<Extract<QueryMsg, {
    vote: unknown;
  }>["vote"]>): QueryMsg => {
    return {
      vote: ({
        proposal_id: proposalId,
        voter
      } as const)
    };
  };
  static listVotes = ({
    limit,
    proposalId,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    list_votes: unknown;
  }>["list_votes"]>): QueryMsg => {
    return {
      list_votes: ({
        limit,
        proposal_id: proposalId,
        start_after: startAfter
      } as const)
    };
  };
  static proposalHooks = (): QueryMsg => {
    return {
      proposal_hooks: ({} as const)
    };
  };
  static voteHooks = (): QueryMsg => {
    return {
      vote_hooks: ({} as const)
    };
  };
  static info = (): QueryMsg => {
    return {
      info: ({} as const)
    };
  };
}