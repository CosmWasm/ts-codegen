/**
* This file was automatically generated by @abstract-money/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

export type Addr = string;
export type Uint128 = string;
export type Duration = {
  height: number;
} | {
  time: number;
};
export type Threshold = {
  absolute_percentage: {
    percentage: PercentageThreshold;
    [k: string]: unknown;
  };
} | {
  threshold_quorum: {
    quorum: PercentageThreshold;
    threshold: PercentageThreshold;
    [k: string]: unknown;
  };
} | {
  absolute_count: {
    threshold: Uint128;
    [k: string]: unknown;
  };
};
export type PercentageThreshold = {
  majority: {
    [k: string]: unknown;
  };
} | {
  percent: Decimal;
};
export type Decimal = string;
export interface ConfigResponse {
  allow_revoting: boolean;
  dao: Addr;
  deposit_info?: CheckedDepositInfo | null;
  max_voting_period: Duration;
  min_voting_period?: Duration | null;
  only_members_execute: boolean;
  threshold: Threshold;
  [k: string]: unknown;
}
export interface CheckedDepositInfo {
  deposit: Uint128;
  refund_failed_proposals: boolean;
  token: Addr;
  [k: string]: unknown;
}
export type ExecuteMsg = {
  propose: {
    description: string;
    msgs: CosmosMsgForEmpty[];
    title: string;
    [k: string]: unknown;
  };
} | {
  vote: {
    proposal_id: number;
    vote: Vote;
    [k: string]: unknown;
  };
} | {
  execute: {
    proposal_id: number;
    [k: string]: unknown;
  };
} | {
  close: {
    proposal_id: number;
    [k: string]: unknown;
  };
} | {
  update_config: {
    allow_revoting: boolean;
    dao: string;
    deposit_info?: DepositInfo | null;
    max_voting_period: Duration;
    min_voting_period?: Duration | null;
    only_members_execute: boolean;
    threshold: Threshold;
    [k: string]: unknown;
  };
} | {
  add_proposal_hook: {
    address: string;
    [k: string]: unknown;
  };
} | {
  remove_proposal_hook: {
    address: string;
    [k: string]: unknown;
  };
} | {
  add_vote_hook: {
    address: string;
    [k: string]: unknown;
  };
} | {
  remove_vote_hook: {
    address: string;
    [k: string]: unknown;
  };
};
export type CosmosMsgForEmpty = {
  bank: BankMsg;
} | {
  custom: Empty;
} | {
  staking: StakingMsg;
} | {
  distribution: DistributionMsg;
} | {
  stargate: {
    type_url: string;
    value: Binary;
    [k: string]: unknown;
  };
} | {
  ibc: IbcMsg;
} | {
  wasm: WasmMsg;
} | {
  gov: GovMsg;
};
export type BankMsg = {
  send: {
    amount: Coin[];
    to_address: string;
    [k: string]: unknown;
  };
} | {
  burn: {
    amount: Coin[];
    [k: string]: unknown;
  };
};
export type StakingMsg = {
  delegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  undelegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  redelegate: {
    amount: Coin;
    dst_validator: string;
    src_validator: string;
    [k: string]: unknown;
  };
};
export type DistributionMsg = {
  set_withdraw_address: {
    address: string;
    [k: string]: unknown;
  };
} | {
  withdraw_delegator_reward: {
    validator: string;
    [k: string]: unknown;
  };
};
export type Binary = string;
export type IbcMsg = {
  transfer: {
    amount: Coin;
    channel_id: string;
    timeout: IbcTimeout;
    to_address: string;
    [k: string]: unknown;
  };
} | {
  send_packet: {
    channel_id: string;
    data: Binary;
    timeout: IbcTimeout;
    [k: string]: unknown;
  };
} | {
  close_channel: {
    channel_id: string;
    [k: string]: unknown;
  };
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type WasmMsg = {
  execute: {
    contract_addr: string;
    funds: Coin[];
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  instantiate: {
    admin?: string | null;
    code_id: number;
    funds: Coin[];
    label: string;
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  migrate: {
    contract_addr: string;
    msg: Binary;
    new_code_id: number;
    [k: string]: unknown;
  };
} | {
  update_admin: {
    admin: string;
    contract_addr: string;
    [k: string]: unknown;
  };
} | {
  clear_admin: {
    contract_addr: string;
    [k: string]: unknown;
  };
};
export type GovMsg = {
  vote: {
    proposal_id: number;
    vote: VoteOption;
    [k: string]: unknown;
  };
};
export type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export type Vote = "yes" | "no" | "abstain";
export type DepositToken = {
  token: {
    address: string;
    [k: string]: unknown;
  };
} | {
  voting_module_token: {
    [k: string]: unknown;
  };
};
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface Empty {
  [k: string]: unknown;
}
export interface IbcTimeout {
  block?: IbcTimeoutBlock | null;
  timestamp?: Timestamp | null;
  [k: string]: unknown;
}
export interface IbcTimeoutBlock {
  height: number;
  revision: number;
  [k: string]: unknown;
}
export interface DepositInfo {
  deposit: Uint128;
  refund_failed_proposals: boolean;
  token: DepositToken;
  [k: string]: unknown;
}
export type GovernanceModulesResponse = Addr[];
export interface InfoResponse {
  info: ContractVersion;
  [k: string]: unknown;
}
export interface ContractVersion {
  contract: string;
  version: string;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  allow_revoting: boolean;
  deposit_info?: DepositInfo | null;
  max_voting_period: Duration;
  min_voting_period?: Duration | null;
  only_members_execute: boolean;
  threshold: Threshold;
  [k: string]: unknown;
}
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {
    [k: string]: unknown;
  };
};
export type Status = "open" | "rejected" | "passed" | "executed" | "closed";
export interface ListProposalsResponse {
  proposals: ProposalResponse[];
  [k: string]: unknown;
}
export interface ProposalResponse {
  id: number;
  proposal: Proposal;
  [k: string]: unknown;
}
export interface Proposal {
  allow_revoting: boolean;
  deposit_info?: CheckedDepositInfo | null;
  description: string;
  expiration: Expiration;
  min_voting_period?: Expiration | null;
  msgs: CosmosMsgForEmpty[];
  proposer: Addr;
  start_height: number;
  status: Status;
  threshold: Threshold;
  title: string;
  total_power: Uint128;
  votes: Votes;
  [k: string]: unknown;
}
export interface Votes {
  abstain: Uint128;
  no: Uint128;
  yes: Uint128;
  [k: string]: unknown;
}
export interface ListVotesResponse {
  votes: VoteInfo[];
  [k: string]: unknown;
}
export interface VoteInfo {
  power: Uint128;
  vote: Vote;
  voter: Addr;
  [k: string]: unknown;
}
export interface MigrateMsg {
  [k: string]: unknown;
}
export type ProposalCountResponse = number;
export interface ProposalHooksResponse {
  hooks: string[];
  [k: string]: unknown;
}
export type QueryMsg = {
  config: {
    [k: string]: unknown;
  };
} | {
  proposal: {
    proposal_id: number;
    [k: string]: unknown;
  };
} | {
  list_proposals: {
    limit?: number | null;
    start_after?: number | null;
    [k: string]: unknown;
  };
} | {
  reverse_proposals: {
    limit?: number | null;
    start_before?: number | null;
    [k: string]: unknown;
  };
} | {
  proposal_count: {
    [k: string]: unknown;
  };
} | {
  vote: {
    proposal_id: number;
    voter: string;
    [k: string]: unknown;
  };
} | {
  list_votes: {
    limit?: number | null;
    proposal_id: number;
    start_after?: string | null;
    [k: string]: unknown;
  };
} | {
  proposal_hooks: {
    [k: string]: unknown;
  };
} | {
  vote_hooks: {
    [k: string]: unknown;
  };
} | {
  info: {
    [k: string]: unknown;
  };
};
export interface ReverseProposalsResponse {
  proposals: ProposalResponse[];
  [k: string]: unknown;
}
export interface VoteHooksResponse {
  hooks: string[];
  [k: string]: unknown;
}
export interface VoteResponse {
  vote?: VoteInfo | null;
  [k: string]: unknown;
}