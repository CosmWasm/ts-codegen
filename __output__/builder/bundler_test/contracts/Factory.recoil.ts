/**
* This file was automatically generated by @abstract-money/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { selectorFamily } from "recoil";
import { cosmWasmClient } from "./chain";
import { AdminAddrResponse, CodeIdResponse, CodeIdType, Uint128, Binary, CreateWalletMsg, Guardians, MultiSig, Coin, Cw20Coin, ExecuteMsg, Addr, ProxyMigrationTxMsg, WalletAddr, CanonicalAddr, RelayTransaction, FeeResponse, GovecAddrResponse, InstantiateMsg, QueryMsg, WalletQueryPrefix, Duration, StakingOptions, WalletInfo, ContractVersion, WalletsOfResponse, WalletsResponse } from "./Factory.types";
import { FactoryQueryClient } from "./Factory.client";
type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<FactoryQueryClient, QueryClientParams>({
  key: "factoryQueryClient",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClient);
    return new FactoryQueryClient(client, contractAddress);
  }
});
export const walletsSelector = selectorFamily<WalletsResponse, QueryClientParams & {
  params: Parameters<FactoryQueryClient["wallets"]>;
}>({
  key: "factoryWallets",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.wallets(...params);
  }
});
export const walletsOfSelector = selectorFamily<WalletsOfResponse, QueryClientParams & {
  params: Parameters<FactoryQueryClient["walletsOf"]>;
}>({
  key: "factoryWalletsOf",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.walletsOf(...params);
  }
});
export const codeIdSelector = selectorFamily<CodeIdResponse, QueryClientParams & {
  params: Parameters<FactoryQueryClient["codeId"]>;
}>({
  key: "factoryCodeId",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.codeId(...params);
  }
});
export const feeSelector = selectorFamily<FeeResponse, QueryClientParams & {
  params: Parameters<FactoryQueryClient["fee"]>;
}>({
  key: "factoryFee",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.fee(...params);
  }
});
export const govecAddrSelector = selectorFamily<GovecAddrResponse, QueryClientParams & {
  params: Parameters<FactoryQueryClient["govecAddr"]>;
}>({
  key: "factoryGovecAddr",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.govecAddr(...params);
  }
});
export const adminAddrSelector = selectorFamily<AdminAddrResponse, QueryClientParams & {
  params: Parameters<FactoryQueryClient["adminAddr"]>;
}>({
  key: "factoryAdminAddr",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.adminAddr(...params);
  }
});