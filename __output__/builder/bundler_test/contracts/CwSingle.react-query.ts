/**
* This file was automatically generated by @abstract-money/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { Addr, Uint128, Duration, Threshold, PercentageThreshold, Decimal, ConfigResponse, CheckedDepositInfo, ExecuteMsg, CosmosMsgForEmpty, BankMsg, StakingMsg, DistributionMsg, Binary, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, Vote, DepositToken, Coin, Empty, IbcTimeout, IbcTimeoutBlock, DepositInfo, GovernanceModulesResponse, InfoResponse, ContractVersion, InstantiateMsg, Expiration, Status, ListProposalsResponse, ProposalResponse, Proposal, Votes, ListVotesResponse, VoteInfo, MigrateMsg, ProposalCountResponse, ProposalHooksResponse, QueryMsg, ReverseProposalsResponse, VoteHooksResponse, VoteResponse } from "./CwSingle.types";
import { CwSingleQueryClient } from "./CwSingle.client";
export interface CwSingleReactQuery<TResponse, TData = TResponse> {
  client: CwSingleQueryClient;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface CwSingleInfoQuery<TData> extends CwSingleReactQuery<InfoResponse, TData> {}
export function useCwSingleInfoQuery<TData = InfoResponse>({
  client,
  options
}: CwSingleInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(["cwSingleInfo", client.contractAddress], () => client.info(), options);
}
export interface CwSingleVoteHooksQuery<TData> extends CwSingleReactQuery<VoteHooksResponse, TData> {}
export function useCwSingleVoteHooksQuery<TData = VoteHooksResponse>({
  client,
  options
}: CwSingleVoteHooksQuery<TData>) {
  return useQuery<VoteHooksResponse, Error, TData>(["cwSingleVoteHooks", client.contractAddress], () => client.voteHooks(), options);
}
export interface CwSingleProposalHooksQuery<TData> extends CwSingleReactQuery<ProposalHooksResponse, TData> {}
export function useCwSingleProposalHooksQuery<TData = ProposalHooksResponse>({
  client,
  options
}: CwSingleProposalHooksQuery<TData>) {
  return useQuery<ProposalHooksResponse, Error, TData>(["cwSingleProposalHooks", client.contractAddress], () => client.proposalHooks(), options);
}
export interface CwSingleListVotesQuery<TData> extends CwSingleReactQuery<ListVotesResponse, TData> {
  args: {
    limit?: number;
    proposalId: number;
    startAfter?: string;
  };
}
export function useCwSingleListVotesQuery<TData = ListVotesResponse>({
  client,
  args,
  options
}: CwSingleListVotesQuery<TData>) {
  return useQuery<ListVotesResponse, Error, TData>(["cwSingleListVotes", client.contractAddress, JSON.stringify(args)], () => client.listVotes({
    limit: args.limit,
    proposalId: args.proposalId,
    startAfter: args.startAfter
  }), options);
}
export interface CwSingleVoteQuery<TData> extends CwSingleReactQuery<VoteResponse, TData> {
  args: {
    proposalId: number;
    voter: string;
  };
}
export function useCwSingleVoteQuery<TData = VoteResponse>({
  client,
  args,
  options
}: CwSingleVoteQuery<TData>) {
  return useQuery<VoteResponse, Error, TData>(["cwSingleVote", client.contractAddress, JSON.stringify(args)], () => client.vote({
    proposalId: args.proposalId,
    voter: args.voter
  }), options);
}
export interface CwSingleProposalCountQuery<TData> extends CwSingleReactQuery<ProposalCountResponse, TData> {}
export function useCwSingleProposalCountQuery<TData = ProposalCountResponse>({
  client,
  options
}: CwSingleProposalCountQuery<TData>) {
  return useQuery<ProposalCountResponse, Error, TData>(["cwSingleProposalCount", client.contractAddress], () => client.proposalCount(), options);
}
export interface CwSingleReverseProposalsQuery<TData> extends CwSingleReactQuery<ReverseProposalsResponse, TData> {
  args: {
    limit?: number;
    startBefore?: number;
  };
}
export function useCwSingleReverseProposalsQuery<TData = ReverseProposalsResponse>({
  client,
  args,
  options
}: CwSingleReverseProposalsQuery<TData>) {
  return useQuery<ReverseProposalsResponse, Error, TData>(["cwSingleReverseProposals", client.contractAddress, JSON.stringify(args)], () => client.reverseProposals({
    limit: args.limit,
    startBefore: args.startBefore
  }), options);
}
export interface CwSingleListProposalsQuery<TData> extends CwSingleReactQuery<ListProposalsResponse, TData> {
  args: {
    limit?: number;
    startAfter?: number;
  };
}
export function useCwSingleListProposalsQuery<TData = ListProposalsResponse>({
  client,
  args,
  options
}: CwSingleListProposalsQuery<TData>) {
  return useQuery<ListProposalsResponse, Error, TData>(["cwSingleListProposals", client.contractAddress, JSON.stringify(args)], () => client.listProposals({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface CwSingleProposalQuery<TData> extends CwSingleReactQuery<ProposalResponse, TData> {
  args: {
    proposalId: number;
  };
}
export function useCwSingleProposalQuery<TData = ProposalResponse>({
  client,
  args,
  options
}: CwSingleProposalQuery<TData>) {
  return useQuery<ProposalResponse, Error, TData>(["cwSingleProposal", client.contractAddress, JSON.stringify(args)], () => client.proposal({
    proposalId: args.proposalId
  }), options);
}
export interface CwSingleConfigQuery<TData> extends CwSingleReactQuery<ConfigResponse, TData> {}
export function useCwSingleConfigQuery<TData = ConfigResponse>({
  client,
  options
}: CwSingleConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["cwSingleConfig", client.contractAddress], () => client.config(), options);
}