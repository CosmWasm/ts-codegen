/**
* This file was automatically generated by @abstract-money/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

export type Decimal = string;
export type AssetEntry = string;
export type BondingPeriodSelector = ("shortest" | "longest") | {
  custom: Duration;
};
export type Duration = {
  height: number;
} | {
  time: number;
};
export interface InstantiateMsg {
  code_id: number;
  commission_addr: string;
  deposit_fees: Decimal;
  dex: string;
  fee_asset: string;
  performance_fees: Decimal;
  pool_assets: AssetEntry[];
  preferred_bonding_period: BondingPeriodSelector;
  withdrawal_fees: Decimal;
}
export type ExecuteMsg = {
  update_fee_config: {
    deposit?: Decimal | null;
    performance?: Decimal | null;
    withdrawal?: Decimal | null;
  };
} | {
  deposit: {
    funds: AnsAsset[];
  };
} | {
  withdraw: {};
} | {
  compound: {};
} | {
  batch_unbond: {};
};
export type Uint128 = string;
export interface AnsAsset {
  amount: Uint128;
  name: AssetEntry;
  [k: string]: unknown;
}
export type QueryMsg = {
  config: {};
} | {
  pending_claims: {
    address: string;
  };
} | {
  claims: {
    address: string;
  };
} | {
  all_claims: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  latest_unbonding: {};
} | {
  total_lp_position: {};
} | {
  balance: {
    address: string;
  };
};
export interface MigrateMsg {}
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {};
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type ArrayOfTupleOfStringAndArrayOfClaim = [string, Claim[]][];
export interface Claim {
  amount_of_lp_tokens_to_unbond: Uint128;
  amount_of_vault_tokens_to_burn: Uint128;
  unbonding_timestamp: Expiration;
}
export type ArrayOfClaim = Claim[];
export type Addr = string;
export type PoolAddressBaseForAddr = {
  contract: Addr;
} | {
  id: number;
};
export type AssetInfoBaseForAddr = {
  native: string;
} | {
  cw20: Addr;
};
export type PoolType = "ConstantProduct" | "Stable" | "Weighted" | "LiquidityBootstrap";
export interface Config {
  liquidity_token: Addr;
  min_unbonding_cooldown?: Duration | null;
  pool_address: PoolAddressBaseForAddr;
  pool_assets: AssetInfoBaseForAddr[];
  pool_data: PoolMetadata;
  staking_contract: Addr;
  unbonding_period?: Duration | null;
  vault_token: Addr;
}
export interface PoolMetadata {
  assets: AssetEntry[];
  dex: string;
  pool_type: PoolType;
  [k: string]: unknown;
}