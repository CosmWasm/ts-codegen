/**
* This file was automatically generated by @abstract-money/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Decimal, InstantiateMsg, ExecuteMsg, Uint128, AssetInfoBaseForString, AssetBaseForString, QueryMsg, MigrateMsg, StateResponse } from "./Etf.types";
import { EtfAppQueryClient, EtfAppClient } from "./Etf.client";
export const etfQueryKeys = {
  contract: ([{
    contract: "etf"
  }] as const),
  address: (contractAddress: string) => ([{ ...etfQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  state: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...etfQueryKeys.address(contractAddress)[0],
    method: "state",
    args
  }] as const)
};
export const etfQueries = {
  state: <TData = StateResponse,>({
    client,
    options
  }: EtfStateQuery<TData>): UseQueryOptions<StateResponse, Error, TData> => ({
    queryKey: etfQueryKeys.state(client?.moduleId),
    queryFn: () => client.state(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface EtfReactQuery<TResponse, TData = TResponse> {
  client: EtfAppQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface EtfStateQuery<TData> extends EtfReactQuery<StateResponse, TData> {}
export function useEtfStateQuery<TData = StateResponse>({
  client,
  options
}: EtfStateQuery<TData>) {
  return useQuery<StateResponse, Error, TData>(etfQueryKeys.state(client.moduleId), () => client.state(), options);
}
export interface EtfSetFeeMutation {
  client: EtfAppClient;
  msg: {
    fee: Decimal;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useEtfSetFeeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, EtfSetFeeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, EtfSetFeeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setFee(msg, fee, memo, funds), options);
}
export interface EtfProvideLiquidityMutation {
  client: EtfAppClient;
  msg: {
    asset: AssetBaseForString;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useEtfProvideLiquidityMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, EtfProvideLiquidityMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, EtfProvideLiquidityMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.provideLiquidity(msg, fee, memo, funds), options);
}