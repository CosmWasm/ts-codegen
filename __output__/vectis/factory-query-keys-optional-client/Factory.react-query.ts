/**
* This file was automatically generated by @abstract-money/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { AdminAddrResponse, CodeIdResponse, CodeIdType, Uint128, Binary, CreateWalletMsg, Guardians, MultiSig, Coin, Cw20Coin, ExecuteMsg, Addr, ProxyMigrationTxMsg, WalletAddr, CanonicalAddr, RelayTransaction, FeeResponse, GovecAddrResponse, InstantiateMsg, QueryMsg, WalletQueryPrefix, Duration, StakingOptions, WalletInfo, ContractVersion, WalletsOfResponse, WalletsResponse } from "./Factory.types";
import { FactoryQueryClient } from "./Factoryclient";
export const factoryQueryKeys = {
  contract: ([{
    contract: "factory"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...factoryQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  wallets: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...factoryQueryKeys.address(contractAddress)[0],
    method: "wallets",
    args
  }] as const),
  walletsOf: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...factoryQueryKeys.address(contractAddress)[0],
    method: "wallets_of",
    args
  }] as const),
  codeId: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...factoryQueryKeys.address(contractAddress)[0],
    method: "code_id",
    args
  }] as const),
  fee: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...factoryQueryKeys.address(contractAddress)[0],
    method: "fee",
    args
  }] as const),
  govecAddr: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...factoryQueryKeys.address(contractAddress)[0],
    method: "govec_addr",
    args
  }] as const),
  adminAddr: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...factoryQueryKeys.address(contractAddress)[0],
    method: "admin_addr",
    args
  }] as const)
};
export interface FactoryReactQuery<TResponse, TData = TResponse> {
  client: FactoryQueryClient | undefined;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface FactoryAdminAddrQuery<TData> extends FactoryReactQuery<AdminAddrResponse, TData> {}
export function useFactoryAdminAddrQuery<TData = AdminAddrResponse>({
  client,
  options
}: FactoryAdminAddrQuery<TData>) {
  return useQuery<AdminAddrResponse, Error, TData>(factoryQueryKeys.adminAddr(client?.contractAddress), () => client ? client.adminAddr() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FactoryGovecAddrQuery<TData> extends FactoryReactQuery<GovecAddrResponse, TData> {}
export function useFactoryGovecAddrQuery<TData = GovecAddrResponse>({
  client,
  options
}: FactoryGovecAddrQuery<TData>) {
  return useQuery<GovecAddrResponse, Error, TData>(factoryQueryKeys.govecAddr(client?.contractAddress), () => client ? client.govecAddr() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FactoryFeeQuery<TData> extends FactoryReactQuery<FeeResponse, TData> {}
export function useFactoryFeeQuery<TData = FeeResponse>({
  client,
  options
}: FactoryFeeQuery<TData>) {
  return useQuery<FeeResponse, Error, TData>(factoryQueryKeys.fee(client?.contractAddress), () => client ? client.fee() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FactoryCodeIdQuery<TData> extends FactoryReactQuery<CodeIdResponse, TData> {
  args: {
    ty: CodeIdType;
  };
}
export function useFactoryCodeIdQuery<TData = CodeIdResponse>({
  client,
  args,
  options
}: FactoryCodeIdQuery<TData>) {
  return useQuery<CodeIdResponse, Error, TData>(factoryQueryKeys.codeId(client?.contractAddress, args), () => client ? client.codeId({
    ty: args.ty
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FactoryWalletsOfQuery<TData> extends FactoryReactQuery<WalletsOfResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
    user: string;
  };
}
export function useFactoryWalletsOfQuery<TData = WalletsOfResponse>({
  client,
  args,
  options
}: FactoryWalletsOfQuery<TData>) {
  return useQuery<WalletsOfResponse, Error, TData>(factoryQueryKeys.walletsOf(client?.contractAddress, args), () => client ? client.walletsOf({
    limit: args.limit,
    startAfter: args.startAfter,
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FactoryWalletsQuery<TData> extends FactoryReactQuery<WalletsResponse, TData> {
  args: {
    limit?: number;
    startAfter?: WalletQueryPrefix;
  };
}
export function useFactoryWalletsQuery<TData = WalletsResponse>({
  client,
  args,
  options
}: FactoryWalletsQuery<TData>) {
  return useQuery<WalletsResponse, Error, TData>(factoryQueryKeys.wallets(client?.contractAddress, args), () => client ? client.wallets({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}