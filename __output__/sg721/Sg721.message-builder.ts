/**
* This file was automatically generated by @cosmwasm/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Expiration, Timestamp, Uint64, AllNftInfoResponse, OwnerOfResponse, Approval, NftInfoResponseForEmpty, Empty, AllOperatorsResponse, AllTokensResponse, ApprovalResponse, ApprovalsResponse, Decimal, CollectionInfoResponse, RoyaltyInfoResponse, ContractInfoResponse, ExecuteMsgForEmpty, Binary, MintMsgForEmpty, InstantiateMsg, CollectionInfoForRoyaltyInfoResponse, MinterResponse, NftInfoResponse, NumTokensResponse, OperatorsResponse, QueryMsg, TokensResponse } from "./Sg721.types";
import { CamelCasedProperties } from "type-fest";
export abstract class Sg721ExecuteMsgBuilder {
  static transferNft = ({
    recipient,
    tokenId
  }: CamelCasedProperties<Extract<ExecuteMsgForEmpty, {
    transfer_nft: unknown;
  }>["transfer_nft"]>): ExecuteMsgForEmpty => {
    return {
      transfer_nft: ({
        recipient,
        token_id: tokenId
      } as const)
    };
  };
  static sendNft = ({
    contract,
    msg,
    tokenId
  }: CamelCasedProperties<Extract<ExecuteMsgForEmpty, {
    send_nft: unknown;
  }>["send_nft"]>): ExecuteMsgForEmpty => {
    return {
      send_nft: ({
        contract,
        msg,
        token_id: tokenId
      } as const)
    };
  };
  static approve = ({
    expires,
    spender,
    tokenId
  }: CamelCasedProperties<Extract<ExecuteMsgForEmpty, {
    approve: unknown;
  }>["approve"]>): ExecuteMsgForEmpty => {
    return {
      approve: ({
        expires,
        spender,
        token_id: tokenId
      } as const)
    };
  };
  static revoke = ({
    spender,
    tokenId
  }: CamelCasedProperties<Extract<ExecuteMsgForEmpty, {
    revoke: unknown;
  }>["revoke"]>): ExecuteMsgForEmpty => {
    return {
      revoke: ({
        spender,
        token_id: tokenId
      } as const)
    };
  };
  static approveAll = ({
    expires,
    operator
  }: CamelCasedProperties<Extract<ExecuteMsgForEmpty, {
    approve_all: unknown;
  }>["approve_all"]>): ExecuteMsgForEmpty => {
    return {
      approve_all: ({
        expires,
        operator
      } as const)
    };
  };
  static revokeAll = ({
    operator
  }: CamelCasedProperties<Extract<ExecuteMsgForEmpty, {
    revoke_all: unknown;
  }>["revoke_all"]>): ExecuteMsgForEmpty => {
    return {
      revoke_all: ({
        operator
      } as const)
    };
  };
  static mint = ({
    extension,
    owner,
    tokenId,
    tokenUri
  }: CamelCasedProperties<Extract<ExecuteMsgForEmpty, {
    mint: unknown;
  }>["mint"]>): ExecuteMsgForEmpty => {
    return {
      mint: ({
        extension,
        owner,
        token_id: tokenId,
        token_uri: tokenUri
      } as const)
    };
  };
  static burn = ({
    tokenId
  }: CamelCasedProperties<Extract<ExecuteMsgForEmpty, {
    burn: unknown;
  }>["burn"]>): ExecuteMsgForEmpty => {
    return {
      burn: ({
        token_id: tokenId
      } as const)
    };
  };
}
export abstract class Sg721QueryMsgBuilder {
  static ownerOf = ({
    includeExpired,
    tokenId
  }: CamelCasedProperties<Extract<QueryMsg, {
    owner_of: unknown;
  }>["owner_of"]>): QueryMsg => {
    return {
      owner_of: ({
        include_expired: includeExpired,
        token_id: tokenId
      } as const)
    };
  };
  static approval = ({
    includeExpired,
    spender,
    tokenId
  }: CamelCasedProperties<Extract<QueryMsg, {
    approval: unknown;
  }>["approval"]>): QueryMsg => {
    return {
      approval: ({
        include_expired: includeExpired,
        spender,
        token_id: tokenId
      } as const)
    };
  };
  static approvals = ({
    includeExpired,
    tokenId
  }: CamelCasedProperties<Extract<QueryMsg, {
    approvals: unknown;
  }>["approvals"]>): QueryMsg => {
    return {
      approvals: ({
        include_expired: includeExpired,
        token_id: tokenId
      } as const)
    };
  };
  static allOperators = ({
    includeExpired,
    limit,
    owner,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    all_operators: unknown;
  }>["all_operators"]>): QueryMsg => {
    return {
      all_operators: ({
        include_expired: includeExpired,
        limit,
        owner,
        start_after: startAfter
      } as const)
    };
  };
  static numTokens = (): QueryMsg => {
    return {
      num_tokens: ({} as const)
    };
  };
  static contractInfo = (): QueryMsg => {
    return {
      contract_info: ({} as const)
    };
  };
  static nftInfo = ({
    tokenId
  }: CamelCasedProperties<Extract<QueryMsg, {
    nft_info: unknown;
  }>["nft_info"]>): QueryMsg => {
    return {
      nft_info: ({
        token_id: tokenId
      } as const)
    };
  };
  static allNftInfo = ({
    includeExpired,
    tokenId
  }: CamelCasedProperties<Extract<QueryMsg, {
    all_nft_info: unknown;
  }>["all_nft_info"]>): QueryMsg => {
    return {
      all_nft_info: ({
        include_expired: includeExpired,
        token_id: tokenId
      } as const)
    };
  };
  static tokens = ({
    limit,
    owner,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    tokens: unknown;
  }>["tokens"]>): QueryMsg => {
    return {
      tokens: ({
        limit,
        owner,
        start_after: startAfter
      } as const)
    };
  };
  static allTokens = ({
    limit,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    all_tokens: unknown;
  }>["all_tokens"]>): QueryMsg => {
    return {
      all_tokens: ({
        limit,
        start_after: startAfter
      } as const)
    };
  };
  static minter = (): QueryMsg => {
    return {
      minter: ({} as const)
    };
  };
  static collectionInfo = (): QueryMsg => {
    return {
      collection_info: ({} as const)
    };
  };
}