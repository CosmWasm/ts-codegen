/**
* This file was automatically generated by @abstract-money/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { InstantiateMsg, Member, ExecuteMsg, QueryMsg, AdminResponse, HooksResponse, MemberListResponse, MemberResponse, TotalWeightResponse } from "./Cw4Group.types";
import { Cw4GroupQueryClient } from "./Cw4Groupclient";
export interface Cw4GroupReactQuery<TResponse, TData = TResponse> {
  client: Cw4GroupQueryClient;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface Cw4GroupHooksQuery<TData> extends Cw4GroupReactQuery<HooksResponse, TData> {}
export function useCw4GroupHooksQuery<TData = HooksResponse>({
  client,
  options
}: Cw4GroupHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(["cw4GroupHooks", client.contractAddress], () => client.hooks(), options);
}
export interface Cw4GroupMemberQuery<TData> extends Cw4GroupReactQuery<MemberResponse, TData> {
  args: {
    addr: string;
    atHeight?: number;
  };
}
export function useCw4GroupMemberQuery<TData = MemberResponse>({
  client,
  args,
  options
}: Cw4GroupMemberQuery<TData>) {
  return useQuery<MemberResponse, Error, TData>(["cw4GroupMember", client.contractAddress, JSON.stringify(args)], () => client.member({
    addr: args.addr,
    atHeight: args.atHeight
  }), options);
}
export interface Cw4GroupListMembersQuery<TData> extends Cw4GroupReactQuery<MemberListResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCw4GroupListMembersQuery<TData = MemberListResponse>({
  client,
  args,
  options
}: Cw4GroupListMembersQuery<TData>) {
  return useQuery<MemberListResponse, Error, TData>(["cw4GroupListMembers", client.contractAddress, JSON.stringify(args)], () => client.listMembers({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface Cw4GroupTotalWeightQuery<TData> extends Cw4GroupReactQuery<TotalWeightResponse, TData> {}
export function useCw4GroupTotalWeightQuery<TData = TotalWeightResponse>({
  client,
  options
}: Cw4GroupTotalWeightQuery<TData>) {
  return useQuery<TotalWeightResponse, Error, TData>(["cw4GroupTotalWeight", client.contractAddress], () => client.totalWeight(), options);
}
export interface Cw4GroupAdminQuery<TData> extends Cw4GroupReactQuery<AdminResponse, TData> {}
export function useCw4GroupAdminQuery<TData = AdminResponse>({
  client,
  options
}: Cw4GroupAdminQuery<TData>) {
  return useQuery<AdminResponse, Error, TData>(["cw4GroupAdmin", client.contractAddress], () => client.admin(), options);
}