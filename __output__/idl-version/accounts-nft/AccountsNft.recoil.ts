/**
* This file was automatically generated by @abstract-money/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { selectorFamily } from "recoil";
import { cosmWasmClient } from "./chain";
import { InstantiateMsg, ExecuteMsg, Binary, Expiration, Timestamp, Uint64, QueryMsg, VaultBaseForString, Uint128, ArrayOfSharesResponseItem, SharesResponseItem, AllNftInfoResponseForEmpty, OwnerOfResponse, Approval, NftInfoResponseForEmpty, Empty, OperatorsResponse, String, TokensResponse, ArrayOfVaultBaseForString, ApprovalResponse, ApprovalsResponse, ContractInfoResponse, MinterResponse, NumTokensResponse } from "./AccountsNft.types";
import { AccountsNftQueryClient } from "./AccountsNft.client";
type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<AccountsNftQueryClient, QueryClientParams>({
  key: "accountsNftQueryClient",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClient);
    return new AccountsNftQueryClient(client, contractAddress);
  }
});
export const proposedNewOwnerSelector = selectorFamily<String, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["proposedNewOwner"]>;
}>({
  key: "accountsNftProposedNewOwner",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.proposedNewOwner(...params);
  }
});
export const allowedVaultsSelector = selectorFamily<ArrayOfVaultBaseForString, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["allowedVaults"]>;
}>({
  key: "accountsNftAllowedVaults",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allowedVaults(...params);
  }
});
export const allDebtSharesSelector = selectorFamily<ArrayOfSharesResponseItem, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["allDebtShares"]>;
}>({
  key: "accountsNftAllDebtShares",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allDebtShares(...params);
  }
});
export const allPreviousOwnersSelector = selectorFamily<String, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["allPreviousOwners"]>;
}>({
  key: "accountsNftAllPreviousOwners",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allPreviousOwners(...params);
  }
});
export const ownerOfSelector = selectorFamily<OwnerOfResponse, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["ownerOf"]>;
}>({
  key: "accountsNftOwnerOf",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.ownerOf(...params);
  }
});
export const approvalSelector = selectorFamily<ApprovalResponse, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["approval"]>;
}>({
  key: "accountsNftApproval",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.approval(...params);
  }
});
export const approvalsSelector = selectorFamily<ApprovalsResponse, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["approvals"]>;
}>({
  key: "accountsNftApprovals",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.approvals(...params);
  }
});
export const allOperatorsSelector = selectorFamily<OperatorsResponse, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["allOperators"]>;
}>({
  key: "accountsNftAllOperators",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allOperators(...params);
  }
});
export const numTokensSelector = selectorFamily<NumTokensResponse, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["numTokens"]>;
}>({
  key: "accountsNftNumTokens",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.numTokens(...params);
  }
});
export const contractInfoSelector = selectorFamily<ContractInfoResponse, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["contractInfo"]>;
}>({
  key: "accountsNftContractInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.contractInfo(...params);
  }
});
export const nftInfoSelector = selectorFamily<NftInfoResponseForEmpty, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["nftInfo"]>;
}>({
  key: "accountsNftNftInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.nftInfo(...params);
  }
});
export const allNftInfoSelector = selectorFamily<AllNftInfoResponseForEmpty, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["allNftInfo"]>;
}>({
  key: "accountsNftAllNftInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allNftInfo(...params);
  }
});
export const tokensSelector = selectorFamily<TokensResponse, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["tokens"]>;
}>({
  key: "accountsNftTokens",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.tokens(...params);
  }
});
export const allTokensSelector = selectorFamily<TokensResponse, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["allTokens"]>;
}>({
  key: "accountsNftAllTokens",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allTokens(...params);
  }
});
export const minterSelector = selectorFamily<MinterResponse, QueryClientParams & {
  params: Parameters<AccountsNftQueryClient["minter"]>;
}>({
  key: "accountsNftMinter",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.minter(...params);
  }
});