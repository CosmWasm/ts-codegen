/**
* This file was automatically generated by @cosmwasm/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Timestamp, Uint64, Addr, Env, BlockInfo, ContractInfo, TransactionInfo } from "./CyberPunk.types";
export interface CyberPunkReadOnlyInterface {
  contractAddress: string;
  mirrorEnv: () => Promise<Env>;
}
export class CyberPunkQueryClient implements CyberPunkReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.mirrorEnv = this.mirrorEnv.bind(this);
  }
  mirrorEnv = async (): Promise<Env> => {
    return this.client.queryContractSmart(this.contractAddress, {
      mirror_env: {}
    });
  };
}
export interface CyberPunkInterface extends CyberPunkReadOnlyInterface {
  contractAddress: string;
  sender: string;
  argon2: ({
    memCost,
    timeCost
  }: {
    memCost: number;
    timeCost: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  mirrorEnv: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class CyberPunkClient extends CyberPunkQueryClient implements CyberPunkInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.argon2 = this.argon2.bind(this);
    this.mirrorEnv = this.mirrorEnv.bind(this);
  }
  argon2 = async ({
    memCost,
    timeCost
  }: {
    memCost: number;
    timeCost: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      argon2: {
        mem_cost: memCost,
        time_cost: timeCost
      }
    }, fee_, memo_, funds_);
  };
  mirrorEnv = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mirror_env: {}
    }, fee_, memo_, funds_);
  };
}