/**
* This file was automatically generated by @abstract-money/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { selectorFamily } from "recoil";
import { cosmWasmClient } from "./chain";
import { Duration, Threshold, Decimal, InstantiateMsg, Voter, ExecuteMsg, Expiration, Timestamp, Uint64, CosmosMsgForEmpty, BankMsg, Uint128, StakingMsg, DistributionMsg, WasmMsg, Binary, Vote, Coin, Empty, QueryMsg, Status, ThresholdResponse, ProposalListResponse, ProposalResponseForEmpty, VoterListResponse, VoterDetail, VoteListResponse, VoteInfo, VoteResponse, VoterResponse } from "./Cw3FixedMultiSig.types";
import { Cw3FixedMultiSigQueryClient } from "./Cw3FixedMultiSig.client";
type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<Cw3FixedMultiSigQueryClient, QueryClientParams>({
  key: "cw3FixedMultiSigQueryClient",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClient);
    return new Cw3FixedMultiSigQueryClient(client, contractAddress);
  }
});
export const thresholdSelector = selectorFamily<ThresholdResponse, QueryClientParams & {
  params: Parameters<Cw3FixedMultiSigQueryClient["threshold"]>;
}>({
  key: "cw3FixedMultiSigThreshold",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.threshold(...params);
  }
});
export const proposalSelector = selectorFamily<ProposalResponseForEmpty, QueryClientParams & {
  params: Parameters<Cw3FixedMultiSigQueryClient["proposal"]>;
}>({
  key: "cw3FixedMultiSigProposal",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.proposal(...params);
  }
});
export const listProposalsSelector = selectorFamily<ProposalListResponse, QueryClientParams & {
  params: Parameters<Cw3FixedMultiSigQueryClient["listProposals"]>;
}>({
  key: "cw3FixedMultiSigListProposals",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.listProposals(...params);
  }
});
export const reverseProposalsSelector = selectorFamily<ProposalListResponse, QueryClientParams & {
  params: Parameters<Cw3FixedMultiSigQueryClient["reverseProposals"]>;
}>({
  key: "cw3FixedMultiSigReverseProposals",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.reverseProposals(...params);
  }
});
export const voteSelector = selectorFamily<VoteResponse, QueryClientParams & {
  params: Parameters<Cw3FixedMultiSigQueryClient["vote"]>;
}>({
  key: "cw3FixedMultiSigVote",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.vote(...params);
  }
});
export const listVotesSelector = selectorFamily<VoteListResponse, QueryClientParams & {
  params: Parameters<Cw3FixedMultiSigQueryClient["listVotes"]>;
}>({
  key: "cw3FixedMultiSigListVotes",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.listVotes(...params);
  }
});
export const voterSelector = selectorFamily<VoterResponse, QueryClientParams & {
  params: Parameters<Cw3FixedMultiSigQueryClient["voter"]>;
}>({
  key: "cw3FixedMultiSigVoter",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.voter(...params);
  }
});
export const listVotersSelector = selectorFamily<VoterListResponse, QueryClientParams & {
  params: Parameters<Cw3FixedMultiSigQueryClient["listVoters"]>;
}>({
  key: "cw3FixedMultiSigListVoters",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.listVoters(...params);
  }
});