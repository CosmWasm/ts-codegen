/**
* This file was automatically generated by @cosmwasm/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, SudoMsg, Uint128, Coin, IntResponse, AllBalanceResponse, Binary, RecurseResponse, VerifierResponse } from "./HackAtom.types";
export interface HackAtomReadOnlyInterface {
  contractAddress: string;
  verifier: () => Promise<VerifierResponse>;
  otherBalance: ({
    address
  }: {
    address: string;
  }) => Promise<AllBalanceResponse>;
  recurse: ({
    depth,
    work
  }: {
    depth: number;
    work: number;
  }) => Promise<RecurseResponse>;
  getInt: () => Promise<IntResponse>;
}
export class HackAtomQueryClient implements HackAtomReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.verifier = this.verifier.bind(this);
    this.otherBalance = this.otherBalance.bind(this);
    this.recurse = this.recurse.bind(this);
    this.getInt = this.getInt.bind(this);
  }
  verifier = async (): Promise<VerifierResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      verifier: {}
    });
  };
  otherBalance = async ({
    address
  }: {
    address: string;
  }): Promise<AllBalanceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      other_balance: {
        address
      }
    });
  };
  recurse = async ({
    depth,
    work
  }: {
    depth: number;
    work: number;
  }): Promise<RecurseResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      recurse: {
        depth,
        work
      }
    });
  };
  getInt = async (): Promise<IntResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_int: {}
    });
  };
}
export interface HackAtomInterface extends HackAtomReadOnlyInterface {
  contractAddress: string;
  sender: string;
  release: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  cpuLoop: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  storageLoop: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  memoryLoop: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  messageLoop: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  allocateLargeMemory: ({
    pages
  }: {
    pages: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  panic: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  userErrorsInApiCalls: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class HackAtomClient extends HackAtomQueryClient implements HackAtomInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.release = this.release.bind(this);
    this.cpuLoop = this.cpuLoop.bind(this);
    this.storageLoop = this.storageLoop.bind(this);
    this.memoryLoop = this.memoryLoop.bind(this);
    this.messageLoop = this.messageLoop.bind(this);
    this.allocateLargeMemory = this.allocateLargeMemory.bind(this);
    this.panic = this.panic.bind(this);
    this.userErrorsInApiCalls = this.userErrorsInApiCalls.bind(this);
  }
  release = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      release: {}
    }, fee_, memo_, funds_);
  };
  cpuLoop = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cpu_loop: {}
    }, fee_, memo_, funds_);
  };
  storageLoop = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      storage_loop: {}
    }, fee_, memo_, funds_);
  };
  memoryLoop = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      memory_loop: {}
    }, fee_, memo_, funds_);
  };
  messageLoop = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      message_loop: {}
    }, fee_, memo_, funds_);
  };
  allocateLargeMemory = async ({
    pages
  }: {
    pages: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      allocate_large_memory: {
        pages
      }
    }, fee_, memo_, funds_);
  };
  panic = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      panic: {}
    }, fee_, memo_, funds_);
  };
  userErrorsInApiCalls = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      user_errors_in_api_calls: {}
    }, fee_, memo_, funds_);
  };
}