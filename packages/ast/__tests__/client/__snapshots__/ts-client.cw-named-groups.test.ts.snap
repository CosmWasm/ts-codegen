// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`execute classes array types 1`] = `
"export class SG721Client implements SG721Instance {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.update = this.update.bind(this);
    this.removeGroup = this.removeGroup.bind(this);
    this.updateOwner = this.updateOwner.bind(this);
  }
  update = async ({
    addressesToAdd,
    addressesToRemove,
    group
  }: {
    addressesToAdd?: string[];
    addressesToRemove?: string[];
    group: string;
  }, fee_: number | StdFee | "auto" = "auto", memo?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update: {
        addresses_to_add: addressesToAdd,
        addresses_to_remove: addressesToRemove,
        group
      }
    }, fee_, memo_, funds_);
  };
  removeGroup = async ({
    group
  }: {
    group: string;
  }, fee_: number | StdFee | "auto" = "auto", memo?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_group: {
        group
      }
    }, fee_, memo_, funds_);
  };
  updateOwner = async ({
    owner
  }: {
    owner: string;
  }, fee_: number | StdFee | "auto" = "auto", memo?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_owner: {
        owner
      }
    }, fee_, memo_, funds_);
  };
}"
`;

exports[`execute interfaces no extends 1`] = `
"export interface SG721Instance {
  contractAddress: string;
  sender: string;
  update: ({
    addressesToAdd,
    addressesToRemove,
    group
  }: {
    addressesToAdd?: string[];
    addressesToRemove?: string[];
    group: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  removeGroup: ({
    group
  }: {
    group: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateOwner: ({
    owner
  }: {
    owner: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}"
`;

exports[`execute_msg 1`] = `"export type ExecuteMsg = ExecuteMsg;"`;

exports[`query classes 1`] = `
"export class SG721QueryClient implements SG721ReadOnlyInstance {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.update = this.update.bind(this);
    this.removeGroup = this.removeGroup.bind(this);
    this.updateOwner = this.updateOwner.bind(this);
  }
  update = async ({
    addressesToAdd,
    addressesToRemove,
    group
  }: {
    addressesToAdd?: string[];
    addressesToRemove?: string[];
    group: string;
  }): Promise<UpdateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      update: {
        addresses_to_add: addressesToAdd,
        addresses_to_remove: addressesToRemove,
        group
      }
    });
  };
  removeGroup = async ({
    group
  }: {
    group: string;
  }): Promise<RemoveGroupResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      remove_group: {
        group
      }
    });
  };
  updateOwner = async ({
    owner
  }: {
    owner: string;
  }): Promise<UpdateOwnerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      update_owner: {
        owner
      }
    });
  };
}"
`;
