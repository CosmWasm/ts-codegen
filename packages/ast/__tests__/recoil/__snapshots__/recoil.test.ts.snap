// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`client 1`] = `
"export const queryClient = selectorFamily<SG721QueryClient, QueryClientParams>({
  key: \\"sG721QueryClient\\",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClient);
    return new SG721QueryClient(client, contractAddress);
  }
});"
`;

exports[`selector 1`] = `
"export const governanceModulesSelector = selectorFamily<GovernanceModulesResponse, QueryClientParams & {
  params: Parameters<SG721QueryClient[\\"governanceModules\\"]>;
}>({
  key: \\"sG721GovernanceModules\\",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.governanceModules(...params);
  }
});"
`;

exports[`selectors 1`] = `
"export const ownerOfSelector = selectorFamily<OwnerOfResponse, QueryClientParams & {
  params: Parameters<SG721QueryClient[\\"ownerOf\\"]>;
}>({
  key: \\"sG721OwnerOf\\",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.ownerOf(...params);
  }
});
export const approvalSelector = selectorFamily<ApprovalResponse, QueryClientParams & {
  params: Parameters<SG721QueryClient[\\"approval\\"]>;
}>({
  key: \\"sG721Approval\\",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.approval(...params);
  }
});
export const approvalsSelector = selectorFamily<ApprovalsResponse, QueryClientParams & {
  params: Parameters<SG721QueryClient[\\"approvals\\"]>;
}>({
  key: \\"sG721Approvals\\",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.approvals(...params);
  }
});
export const allOperatorsSelector = selectorFamily<AllOperatorsResponse, QueryClientParams & {
  params: Parameters<SG721QueryClient[\\"allOperators\\"]>;
}>({
  key: \\"sG721AllOperators\\",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allOperators(...params);
  }
});
export const numTokensSelector = selectorFamily<NumTokensResponse, QueryClientParams & {
  params: Parameters<SG721QueryClient[\\"numTokens\\"]>;
}>({
  key: \\"sG721NumTokens\\",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.numTokens(...params);
  }
});
export const contractInfoSelector = selectorFamily<ContractInfoResponse, QueryClientParams & {
  params: Parameters<SG721QueryClient[\\"contractInfo\\"]>;
}>({
  key: \\"sG721ContractInfo\\",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.contractInfo(...params);
  }
});
export const nftInfoSelector = selectorFamily<NftInfoResponse, QueryClientParams & {
  params: Parameters<SG721QueryClient[\\"nftInfo\\"]>;
}>({
  key: \\"sG721NftInfo\\",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.nftInfo(...params);
  }
});
export const allNftInfoSelector = selectorFamily<AllNftInfoResponse, QueryClientParams & {
  params: Parameters<SG721QueryClient[\\"allNftInfo\\"]>;
}>({
  key: \\"sG721AllNftInfo\\",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allNftInfo(...params);
  }
});
export const tokensSelector = selectorFamily<TokensResponse, QueryClientParams & {
  params: Parameters<SG721QueryClient[\\"tokens\\"]>;
}>({
  key: \\"sG721Tokens\\",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.tokens(...params);
  }
});
export const allTokensSelector = selectorFamily<AllTokensResponse, QueryClientParams & {
  params: Parameters<SG721QueryClient[\\"allTokens\\"]>;
}>({
  key: \\"sG721AllTokens\\",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allTokens(...params);
  }
});
export const minterSelector = selectorFamily<MinterResponse, QueryClientParams & {
  params: Parameters<SG721QueryClient[\\"minter\\"]>;
}>({
  key: \\"sG721Minter\\",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.minter(...params);
  }
});
export const collectionInfoSelector = selectorFamily<CollectionInfoResponse, QueryClientParams & {
  params: Parameters<SG721QueryClient[\\"collectionInfo\\"]>;
}>({
  key: \\"sG721CollectionInfo\\",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.collectionInfo(...params);
  }
});"
`;
