import { join, dirname, basename, extname } from "path";
import { readFileSync, existsSync } from "fs";
import { sync as mkdirp } from "mkdirp";
import { writeContentToFile } from "../utils/files";
import { BuilderFile, TSBuilderInput } from "../builder";
import {
  contractContextBase,
  contractContextBaseShortHandCtor,
  contractsContextTSX,
} from "../helpers";
import { BuilderContext } from "wasm-ast-types";

// need to search due to the dist/ folder and src/, etc. 
function findPackageJson(currentDir: string) {
  const filePath = join(currentDir, 'package.json');

  // Check if package.json exists in the current directory
  if (existsSync(filePath)) {
    return filePath;
  }

  // Get the parent directory
  const parentDir = dirname(currentDir);

  // If reached the root directory, package.json is not found
  if (parentDir === currentDir) {
    throw new Error('package.json not found in any parent directory');
  }

  // Recursively look in the parent directory
  return findPackageJson(parentDir);
}

function readAndParsePackageJson() {
  // Start searching from the current directory
  const pkgPath = findPackageJson(__dirname);

  // Read and parse the package.json
  const str = readFileSync(pkgPath, 'utf8');
  const pkg = JSON.parse(str);
  return pkg;
}

const pkg = readAndParsePackageJson();

const version = process.env.NODE_ENV === "test" ? "latest" : pkg.version;
const header = `/**
* This file and any referenced files were automatically generated by ${pkg.name}@${version}
* DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain
* and run the transpile command or yarn proto command to regenerate this bundle.
*/
\n`;

const write = (
  outPath: string,
  file: string,
  content: string,
  varname?: string
): BuilderFile => {
  const outFile = join(outPath, file);
  mkdirp(dirname(outFile));
  writeContentToFile(outPath, header + content, outFile);

  return {
    type: "plugin",
    pluginType: "helper",
    contract: varname ?? basename(file, extname(file)),
    localname: file,
    filename: outFile,
  };
};

export const createHelpers = (
  input: TSBuilderInput,
  builderContext: BuilderContext
): BuilderFile[] => {
  const files: BuilderFile[] = [];

  if (
    input.options?.useContractsHooks?.enabled &&
    Object.keys(builderContext.providers)?.length
  ) {
    const useShorthandCtor = input.options?.useShorthandCtor;
    files.push(
      write(
        input.outPath,
        "contractContextBase.ts",
        useShorthandCtor
          ? contractContextBaseShortHandCtor
          : contractContextBase
      )
    );
    files.push(
      write(
        input.outPath,
        "contracts-context.tsx",
        contractsContextTSX,
        "contractsContext"
      )
    );
  }

  return files;
};
