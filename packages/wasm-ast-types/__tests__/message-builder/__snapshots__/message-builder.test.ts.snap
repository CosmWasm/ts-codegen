// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`execute class 1`] = `
"export abstract class SG721MessageBuilder {
  static transferNft = ({
    recipient,
    tokenId
  }: CamelCasedProperties<Extract<ExecuteMsg_for_Empty, {
    transfer_nft: unknown;
  }>[\\"transfer_nft\\"]>): ExecuteMsg_for_Empty => {
    return {
      transfer_nft: ({
        recipient,
        token_id: tokenId
      } as const)
    };
  };
  static sendNft = ({
    contract,
    msg,
    tokenId
  }: CamelCasedProperties<Extract<ExecuteMsg_for_Empty, {
    send_nft: unknown;
  }>[\\"send_nft\\"]>): ExecuteMsg_for_Empty => {
    return {
      send_nft: ({
        contract,
        msg,
        token_id: tokenId
      } as const)
    };
  };
  static approve = ({
    expires,
    spender,
    tokenId
  }: CamelCasedProperties<Extract<ExecuteMsg_for_Empty, {
    approve: unknown;
  }>[\\"approve\\"]>): ExecuteMsg_for_Empty => {
    return {
      approve: ({
        expires,
        spender,
        token_id: tokenId
      } as const)
    };
  };
  static revoke = ({
    spender,
    tokenId
  }: CamelCasedProperties<Extract<ExecuteMsg_for_Empty, {
    revoke: unknown;
  }>[\\"revoke\\"]>): ExecuteMsg_for_Empty => {
    return {
      revoke: ({
        spender,
        token_id: tokenId
      } as const)
    };
  };
  static approveAll = ({
    expires,
    operator
  }: CamelCasedProperties<Extract<ExecuteMsg_for_Empty, {
    approve_all: unknown;
  }>[\\"approve_all\\"]>): ExecuteMsg_for_Empty => {
    return {
      approve_all: ({
        expires,
        operator
      } as const)
    };
  };
  static revokeAll = ({
    operator
  }: CamelCasedProperties<Extract<ExecuteMsg_for_Empty, {
    revoke_all: unknown;
  }>[\\"revoke_all\\"]>): ExecuteMsg_for_Empty => {
    return {
      revoke_all: ({
        operator
      } as const)
    };
  };
  static mint = ({
    extension,
    owner,
    tokenId,
    tokenUri
  }: CamelCasedProperties<Extract<ExecuteMsg_for_Empty, {
    mint: unknown;
  }>[\\"mint\\"]>): ExecuteMsg_for_Empty => {
    return {
      mint: ({
        extension,
        owner,
        token_id: tokenId,
        token_uri: tokenUri
      } as const)
    };
  };
  static burn = ({
    tokenId
  }: CamelCasedProperties<Extract<ExecuteMsg_for_Empty, {
    burn: unknown;
  }>[\\"burn\\"]>): ExecuteMsg_for_Empty => {
    return {
      burn: ({
        token_id: tokenId
      } as const)
    };
  };
}"
`;

exports[`ownership 1`] = `
"export abstract class Ownership {
  static setFactory = ({
    newFactory
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    set_factory: unknown;
  }>[\\"set_factory\\"]>): ExecuteMsg => {
    return {
      set_factory: ({
        new_factory: newFactory
      } as const)
    };
  };
  static updateOwnership = (action: Action): ExecuteMsg => {
    return {
      update_ownership: action
    };
  };
}"
`;

exports[`query class 1`] = `
"export abstract class SG721MessageBuilder {
  static ownerOf = ({
    includeExpired,
    tokenId
  }: CamelCasedProperties<Extract<QueryMsg, {
    owner_of: unknown;
  }>[\\"owner_of\\"]>): QueryMsg => {
    return {
      owner_of: ({
        include_expired: includeExpired,
        token_id: tokenId
      } as const)
    };
  };
  static approval = ({
    includeExpired,
    spender,
    tokenId
  }: CamelCasedProperties<Extract<QueryMsg, {
    approval: unknown;
  }>[\\"approval\\"]>): QueryMsg => {
    return {
      approval: ({
        include_expired: includeExpired,
        spender,
        token_id: tokenId
      } as const)
    };
  };
  static approvals = ({
    includeExpired,
    tokenId
  }: CamelCasedProperties<Extract<QueryMsg, {
    approvals: unknown;
  }>[\\"approvals\\"]>): QueryMsg => {
    return {
      approvals: ({
        include_expired: includeExpired,
        token_id: tokenId
      } as const)
    };
  };
  static allOperators = ({
    includeExpired,
    limit,
    owner,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    all_operators: unknown;
  }>[\\"all_operators\\"]>): QueryMsg => {
    return {
      all_operators: ({
        include_expired: includeExpired,
        limit,
        owner,
        start_after: startAfter
      } as const)
    };
  };
  static numTokens = (): QueryMsg => {
    return {
      num_tokens: ({} as const)
    };
  };
  static contractInfo = (): QueryMsg => {
    return {
      contract_info: ({} as const)
    };
  };
  static nftInfo = ({
    tokenId
  }: CamelCasedProperties<Extract<QueryMsg, {
    nft_info: unknown;
  }>[\\"nft_info\\"]>): QueryMsg => {
    return {
      nft_info: ({
        token_id: tokenId
      } as const)
    };
  };
  static allNftInfo = ({
    includeExpired,
    tokenId
  }: CamelCasedProperties<Extract<QueryMsg, {
    all_nft_info: unknown;
  }>[\\"all_nft_info\\"]>): QueryMsg => {
    return {
      all_nft_info: ({
        include_expired: includeExpired,
        token_id: tokenId
      } as const)
    };
  };
  static tokens = ({
    limit,
    owner,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    tokens: unknown;
  }>[\\"tokens\\"]>): QueryMsg => {
    return {
      tokens: ({
        limit,
        owner,
        start_after: startAfter
      } as const)
    };
  };
  static allTokens = ({
    limit,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    all_tokens: unknown;
  }>[\\"all_tokens\\"]>): QueryMsg => {
    return {
      all_tokens: ({
        limit,
        start_after: startAfter
      } as const)
    };
  };
  static minter = (): QueryMsg => {
    return {
      minter: ({} as const)
    };
  };
  static collectionInfo = (): QueryMsg => {
    return {
      collection_info: ({} as const)
    };
  };
}"
`;
